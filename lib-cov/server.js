/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][8] = 0;
  _$jscoverage['server.js'][9] = 0;
  _$jscoverage['server.js'][10] = 0;
  _$jscoverage['server.js'][11] = 0;
  _$jscoverage['server.js'][12] = 0;
  _$jscoverage['server.js'][13] = 0;
  _$jscoverage['server.js'][14] = 0;
  _$jscoverage['server.js'][15] = 0;
  _$jscoverage['server.js'][16] = 0;
  _$jscoverage['server.js'][17] = 0;
  _$jscoverage['server.js'][18] = 0;
  _$jscoverage['server.js'][19] = 0;
  _$jscoverage['server.js'][20] = 0;
  _$jscoverage['server.js'][21] = 0;
  _$jscoverage['server.js'][26] = 0;
  _$jscoverage['server.js'][36] = 0;
  _$jscoverage['server.js'][40] = 0;
  _$jscoverage['server.js'][56] = 0;
  _$jscoverage['server.js'][57] = 0;
  _$jscoverage['server.js'][58] = 0;
  _$jscoverage['server.js'][59] = 0;
  _$jscoverage['server.js'][63] = 0;
  _$jscoverage['server.js'][65] = 0;
  _$jscoverage['server.js'][67] = 0;
  _$jscoverage['server.js'][74] = 0;
  _$jscoverage['server.js'][75] = 0;
  _$jscoverage['server.js'][81] = 0;
  _$jscoverage['server.js'][83] = 0;
  _$jscoverage['server.js'][84] = 0;
  _$jscoverage['server.js'][89] = 0;
  _$jscoverage['server.js'][90] = 0;
  _$jscoverage['server.js'][96] = 0;
  _$jscoverage['server.js'][98] = 0;
  _$jscoverage['server.js'][100] = 0;
  _$jscoverage['server.js'][104] = 0;
  _$jscoverage['server.js'][105] = 0;
  _$jscoverage['server.js'][106] = 0;
  _$jscoverage['server.js'][113] = 0;
  _$jscoverage['server.js'][115] = 0;
  _$jscoverage['server.js'][121] = 0;
  _$jscoverage['server.js'][125] = 0;
  _$jscoverage['server.js'][130] = 0;
  _$jscoverage['server.js'][134] = 0;
  _$jscoverage['server.js'][136] = 0;
  _$jscoverage['server.js'][137] = 0;
  _$jscoverage['server.js'][142] = 0;
  _$jscoverage['server.js'][144] = 0;
  _$jscoverage['server.js'][159] = 0;
  _$jscoverage['server.js'][161] = 0;
  _$jscoverage['server.js'][170] = 0;
  _$jscoverage['server.js'][172] = 0;
  _$jscoverage['server.js'][174] = 0;
  _$jscoverage['server.js'][175] = 0;
  _$jscoverage['server.js'][177] = 0;
  _$jscoverage['server.js'][179] = 0;
  _$jscoverage['server.js'][187] = 0;
  _$jscoverage['server.js'][191] = 0;
  _$jscoverage['server.js'][193] = 0;
  _$jscoverage['server.js'][197] = 0;
  _$jscoverage['server.js'][199] = 0;
  _$jscoverage['server.js'][203] = 0;
  _$jscoverage['server.js'][205] = 0;
  _$jscoverage['server.js'][209] = 0;
  _$jscoverage['server.js'][211] = 0;
  _$jscoverage['server.js'][213] = 0;
  _$jscoverage['server.js'][216] = 0;
  _$jscoverage['server.js'][221] = 0;
  _$jscoverage['server.js'][222] = 0;
  _$jscoverage['server.js'][228] = 0;
  _$jscoverage['server.js'][229] = 0;
  _$jscoverage['server.js'][235] = 0;
  _$jscoverage['server.js'][236] = 0;
  _$jscoverage['server.js'][247] = 0;
  _$jscoverage['server.js'][249] = 0;
  _$jscoverage['server.js'][253] = 0;
  _$jscoverage['server.js'][254] = 0;
  _$jscoverage['server.js'][255] = 0;
  _$jscoverage['server.js'][256] = 0;
  _$jscoverage['server.js'][258] = 0;
  _$jscoverage['server.js'][260] = 0;
  _$jscoverage['server.js'][262] = 0;
  _$jscoverage['server.js'][263] = 0;
  _$jscoverage['server.js'][264] = 0;
  _$jscoverage['server.js'][269] = 0;
  _$jscoverage['server.js'][279] = 0;
  _$jscoverage['server.js'][280] = 0;
  _$jscoverage['server.js'][282] = 0;
  _$jscoverage['server.js'][284] = 0;
  _$jscoverage['server.js'][285] = 0;
  _$jscoverage['server.js'][287] = 0;
  _$jscoverage['server.js'][289] = 0;
  _$jscoverage['server.js'][291] = 0;
  _$jscoverage['server.js'][294] = 0;
  _$jscoverage['server.js'][298] = 0;
  _$jscoverage['server.js'][301] = 0;
  _$jscoverage['server.js'][303] = 0;
  _$jscoverage['server.js'][307] = 0;
  _$jscoverage['server.js'][310] = 0;
  _$jscoverage['server.js'][312] = 0;
  _$jscoverage['server.js'][314] = 0;
  _$jscoverage['server.js'][316] = 0;
  _$jscoverage['server.js'][320] = 0;
  _$jscoverage['server.js'][323] = 0;
  _$jscoverage['server.js'][327] = 0;
  _$jscoverage['server.js'][328] = 0;
  _$jscoverage['server.js'][331] = 0;
  _$jscoverage['server.js'][339] = 0;
  _$jscoverage['server.js'][341] = 0;
  _$jscoverage['server.js'][345] = 0;
  _$jscoverage['server.js'][346] = 0;
  _$jscoverage['server.js'][350] = 0;
  _$jscoverage['server.js'][352] = 0;
  _$jscoverage['server.js'][353] = 0;
  _$jscoverage['server.js'][355] = 0;
  _$jscoverage['server.js'][356] = 0;
  _$jscoverage['server.js'][365] = 0;
  _$jscoverage['server.js'][366] = 0;
  _$jscoverage['server.js'][367] = 0;
  _$jscoverage['server.js'][368] = 0;
  _$jscoverage['server.js'][380] = 0;
  _$jscoverage['server.js'][381] = 0;
  _$jscoverage['server.js'][389] = 0;
  _$jscoverage['server.js'][390] = 0;
  _$jscoverage['server.js'][400] = 0;
  _$jscoverage['server.js'][403] = 0;
  _$jscoverage['server.js'][404] = 0;
  _$jscoverage['server.js'][407] = 0;
  _$jscoverage['server.js'][409] = 0;
  _$jscoverage['server.js'][410] = 0;
  _$jscoverage['server.js'][413] = 0;
  _$jscoverage['server.js'][415] = 0;
  _$jscoverage['server.js'][416] = 0;
  _$jscoverage['server.js'][421] = 0;
  _$jscoverage['server.js'][422] = 0;
  _$jscoverage['server.js'][424] = 0;
  _$jscoverage['server.js'][425] = 0;
  _$jscoverage['server.js'][427] = 0;
  _$jscoverage['server.js'][429] = 0;
  _$jscoverage['server.js'][436] = 0;
  _$jscoverage['server.js'][438] = 0;
  _$jscoverage['server.js'][442] = 0;
  _$jscoverage['server.js'][444] = 0;
  _$jscoverage['server.js'][445] = 0;
  _$jscoverage['server.js'][447] = 0;
  _$jscoverage['server.js'][451] = 0;
  _$jscoverage['server.js'][457] = 0;
  _$jscoverage['server.js'][472] = 0;
  _$jscoverage['server.js'][474] = 0;
  _$jscoverage['server.js'][483] = 0;
  _$jscoverage['server.js'][490] = 0;
  _$jscoverage['server.js'][494] = 0;
  _$jscoverage['server.js'][500] = 0;
  _$jscoverage['server.js'][502] = 0;
  _$jscoverage['server.js'][504] = 0;
  _$jscoverage['server.js'][506] = 0;
  _$jscoverage['server.js'][507] = 0;
  _$jscoverage['server.js'][509] = 0;
  _$jscoverage['server.js'][513] = 0;
  _$jscoverage['server.js'][518] = 0;
  _$jscoverage['server.js'][519] = 0;
  _$jscoverage['server.js'][521] = 0;
  _$jscoverage['server.js'][523] = 0;
  _$jscoverage['server.js'][525] = 0;
  _$jscoverage['server.js'][529] = 0;
  _$jscoverage['server.js'][530] = 0;
  _$jscoverage['server.js'][538] = 0;
  _$jscoverage['server.js'][540] = 0;
  _$jscoverage['server.js'][541] = 0;
  _$jscoverage['server.js'][543] = 0;
  _$jscoverage['server.js'][547] = 0;
  _$jscoverage['server.js'][554] = 0;
  _$jscoverage['server.js'][558] = 0;
  _$jscoverage['server.js'][559] = 0;
  _$jscoverage['server.js'][563] = 0;
  _$jscoverage['server.js'][564] = 0;
  _$jscoverage['server.js'][566] = 0;
  _$jscoverage['server.js'][567] = 0;
  _$jscoverage['server.js'][571] = 0;
  _$jscoverage['server.js'][572] = 0;
  _$jscoverage['server.js'][574] = 0;
  _$jscoverage['server.js'][575] = 0;
  _$jscoverage['server.js'][577] = 0;
  _$jscoverage['server.js'][581] = 0;
  _$jscoverage['server.js'][582] = 0;
  _$jscoverage['server.js'][590] = 0;
  _$jscoverage['server.js'][592] = 0;
  _$jscoverage['server.js'][594] = 0;
  _$jscoverage['server.js'][604] = 0;
  _$jscoverage['server.js'][606] = 0;
  _$jscoverage['server.js'][607] = 0;
  _$jscoverage['server.js'][608] = 0;
  _$jscoverage['server.js'][609] = 0;
  _$jscoverage['server.js'][611] = 0;
  _$jscoverage['server.js'][613] = 0;
  _$jscoverage['server.js'][614] = 0;
  _$jscoverage['server.js'][617] = 0;
  _$jscoverage['server.js'][619] = 0;
  _$jscoverage['server.js'][622] = 0;
  _$jscoverage['server.js'][624] = 0;
  _$jscoverage['server.js'][626] = 0;
  _$jscoverage['server.js'][628] = 0;
  _$jscoverage['server.js'][630] = 0;
  _$jscoverage['server.js'][632] = 0;
  _$jscoverage['server.js'][636] = 0;
  _$jscoverage['server.js'][639] = 0;
  _$jscoverage['server.js'][641] = 0;
  _$jscoverage['server.js'][645] = 0;
  _$jscoverage['server.js'][647] = 0;
  _$jscoverage['server.js'][651] = 0;
  _$jscoverage['server.js'][655] = 0;
  _$jscoverage['server.js'][658] = 0;
  _$jscoverage['server.js'][659] = 0;
  _$jscoverage['server.js'][663] = 0;
  _$jscoverage['server.js'][668] = 0;
  _$jscoverage['server.js'][671] = 0;
  _$jscoverage['server.js'][675] = 0;
  _$jscoverage['server.js'][677] = 0;
  _$jscoverage['server.js'][681] = 0;
  _$jscoverage['server.js'][686] = 0;
  _$jscoverage['server.js'][691] = 0;
  _$jscoverage['server.js'][696] = 0;
  _$jscoverage['server.js'][701] = 0;
  _$jscoverage['server.js'][708] = 0;
  _$jscoverage['server.js'][711] = 0;
  _$jscoverage['server.js'][715] = 0;
  _$jscoverage['server.js'][716] = 0;
  _$jscoverage['server.js'][725] = 0;
  _$jscoverage['server.js'][730] = 0;
  _$jscoverage['server.js'][732] = 0;
  _$jscoverage['server.js'][734] = 0;
  _$jscoverage['server.js'][739] = 0;
  _$jscoverage['server.js'][740] = 0;
  _$jscoverage['server.js'][741] = 0;
  _$jscoverage['server.js'][743] = 0;
  _$jscoverage['server.js'][745] = 0;
  _$jscoverage['server.js'][747] = 0;
  _$jscoverage['server.js'][749] = 0;
  _$jscoverage['server.js'][753] = 0;
  _$jscoverage['server.js'][758] = 0;
  _$jscoverage['server.js'][759] = 0;
  _$jscoverage['server.js'][762] = 0;
  _$jscoverage['server.js'][767] = 0;
  _$jscoverage['server.js'][768] = 0;
  _$jscoverage['server.js'][770] = 0;
  _$jscoverage['server.js'][771] = 0;
  _$jscoverage['server.js'][773] = 0;
  _$jscoverage['server.js'][775] = 0;
  _$jscoverage['server.js'][779] = 0;
  _$jscoverage['server.js'][780] = 0;
  _$jscoverage['server.js'][784] = 0;
  _$jscoverage['server.js'][786] = 0;
  _$jscoverage['server.js'][788] = 0;
  _$jscoverage['server.js'][791] = 0;
  _$jscoverage['server.js'][793] = 0;
  _$jscoverage['server.js'][795] = 0;
  _$jscoverage['server.js'][797] = 0;
  _$jscoverage['server.js'][799] = 0;
  _$jscoverage['server.js'][801] = 0;
  _$jscoverage['server.js'][805] = 0;
  _$jscoverage['server.js'][808] = 0;
  _$jscoverage['server.js'][817] = 0;
  _$jscoverage['server.js'][819] = 0;
  _$jscoverage['server.js'][821] = 0;
  _$jscoverage['server.js'][823] = 0;
  _$jscoverage['server.js'][824] = 0;
  _$jscoverage['server.js'][826] = 0;
  _$jscoverage['server.js'][828] = 0;
  _$jscoverage['server.js'][832] = 0;
  _$jscoverage['server.js'][836] = 0;
  _$jscoverage['server.js'][843] = 0;
  _$jscoverage['server.js'][845] = 0;
  _$jscoverage['server.js'][846] = 0;
  _$jscoverage['server.js'][848] = 0;
  _$jscoverage['server.js'][850] = 0;
  _$jscoverage['server.js'][854] = 0;
  _$jscoverage['server.js'][855] = 0;
  _$jscoverage['server.js'][861] = 0;
  _$jscoverage['server.js'][862] = 0;
  _$jscoverage['server.js'][865] = 0;
  _$jscoverage['server.js'][868] = 0;
  _$jscoverage['server.js'][869] = 0;
}
_$jscoverage['server.js'][8]++;
var Fs = require("fs");
_$jscoverage['server.js'][9]++;
var Http = require("http");
_$jscoverage['server.js'][10]++;
var Https = require("https");
_$jscoverage['server.js'][11]++;
var Url = require("url");
_$jscoverage['server.js'][12]++;
var Querystring = require("querystring");
_$jscoverage['server.js'][13]++;
var Director = require("director");
_$jscoverage['server.js'][14]++;
var MAC = require("mac");
_$jscoverage['server.js'][15]++;
var Utils = require("./utils");
_$jscoverage['server.js'][16]++;
var Err = require("./error");
_$jscoverage['server.js'][17]++;
var Log = require("./log");
_$jscoverage['server.js'][18]++;
var Process = require("./process");
_$jscoverage['server.js'][19]++;
var Validation = require("./validation");
_$jscoverage['server.js'][20]++;
var Defaults = require("./defaults");
_$jscoverage['server.js'][21]++;
var Session = require("./session");
_$jscoverage['server.js'][26]++;
var internals = {servers: {}};
_$jscoverage['server.js'][36]++;
exports.create = (function (host, port, options, routes) {
  _$jscoverage['server.js'][40]++;
  var server = {settings: Utils.merge(Utils.clone(Defaults.server), options || {}), listener: null, router: null, initialize: (function () {
  _$jscoverage['server.js'][56]++;
  server.settings.host = host.toLowerCase();
  _$jscoverage['server.js'][57]++;
  server.settings.port = port;
  _$jscoverage['server.js'][58]++;
  server.settings.name = (server.settings.name? server.settings.name.toLowerCase(): (server.settings.host + ":" + server.settings.port));
  _$jscoverage['server.js'][59]++;
  server.settings.uri = (server.settings.tls? "https://": "http://") + server.settings.host + ":" + server.settings.port + "/";
  _$jscoverage['server.js'][63]++;
  if (server.settings.authentication) {
    _$jscoverage['server.js'][65]++;
    server.settings.authentication = Utils.merge(Utils.clone(Defaults.authentication), server.settings.authentication);
    _$jscoverage['server.js'][67]++;
    if (server.settings.authentication.tokenEndpoint === null || server.settings.authentication.loadClientFunc === null || server.settings.authentication.loadUserFunc === null || server.settings.authentication.checkAuthorizationFunc === null || server.settings.authentication.aes256Keys.oauthRefresh === null || server.settings.authentication.aes256Keys.oauthToken === null) {
      _$jscoverage['server.js'][74]++;
      Log.err("Invalid authentication configuration");
      _$jscoverage['server.js'][75]++;
      process.exit(1);
    }
  }
  _$jscoverage['server.js'][81]++;
  if (internals.servers[server.settings.name]) {
    _$jscoverage['server.js'][83]++;
    Log.err("Cannot configure multiple server instances using the same name or uri");
    _$jscoverage['server.js'][84]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][89]++;
  server.router = new Director.http.Router();
  _$jscoverage['server.js'][90]++;
  server.router.configure({async: true, notfound: server.unhandledRoute});
  _$jscoverage['server.js'][96]++;
  var listernerEntryFunc = (function (req, res) {
  _$jscoverage['server.js'][98]++;
  server.router.dispatch(req, res, (function (err) {
  _$jscoverage['server.js'][100]++;
  if (err) {
    _$jscoverage['server.js'][104]++;
    Log.err("Internal routing error");
    _$jscoverage['server.js'][105]++;
    res.writeHead(500);
    _$jscoverage['server.js'][106]++;
    res.end();
  }
}));
});
  _$jscoverage['server.js'][113]++;
  if (server.settings.tls) {
    _$jscoverage['server.js'][115]++;
    var tls = {key: Fs.readFileSync(server.settings.tls.key), cert: Fs.readFileSync(server.settings.tls.cert)};
    _$jscoverage['server.js'][121]++;
    server.listener = Https.createServer(tls, listernerEntryFunc);
  }
  else {
    _$jscoverage['server.js'][125]++;
    server.listener = Http.createServer(listernerEntryFunc);
  }
  _$jscoverage['server.js'][130]++;
  internals.servers[server.settings.name] = server;
  _$jscoverage['server.js'][134]++;
  server.router.options(/.+/, (function () {
  _$jscoverage['server.js'][136]++;
  server.setCorsHeaders(this.res);
  _$jscoverage['server.js'][137]++;
  internals.respond(this.res, 200);
}));
  _$jscoverage['server.js'][142]++;
  if (server.settings.authentication) {
    _$jscoverage['server.js'][144]++;
    server["public"].addRoute({method: "POST", path: server.settings.authentication.tokenEndpoint, handler: Session.token, schema: Session.type.endpoint, mode: "raw", authentication: "optional", user: "any", tos: "none"});
  }
  _$jscoverage['server.js'][159]++;
  if (routes) {
    _$jscoverage['server.js'][161]++;
    server["public"].addRoutes(routes);
  }
}), preRoute: (function (req, res, next) {
  _$jscoverage['server.js'][170]++;
  req._startTime = new Date();
  _$jscoverage['server.js'][172]++;
  Log.info("Received", req);
  _$jscoverage['server.js'][174]++;
  req.hapi = {};
  _$jscoverage['server.js'][175]++;
  res.hapi = {};
  _$jscoverage['server.js'][177]++;
  req.query = req.url.indexOf("?") >= 0? Url.parse(req.url, true).query: {};
  _$jscoverage['server.js'][179]++;
  next();
}), routeValidator: (function (config) {
  _$jscoverage['server.js'][187]++;
  return (function (req, res, next) {
  _$jscoverage['server.js'][191]++;
  internals.authenticate(req, res, config, server, (function (err) {
  _$jscoverage['server.js'][193]++;
  if (err === null) {
    _$jscoverage['server.js'][197]++;
    Validation.validateQuery(req, config.query? Utils.map(config.query): null, (function (err) {
  _$jscoverage['server.js'][199]++;
  if (err === null) {
    _$jscoverage['server.js'][203]++;
    internals.processBody(req, config.payload || (config.schema? "parse": null), server, (function (err) {
  _$jscoverage['server.js'][205]++;
  if (err === null) {
    _$jscoverage['server.js'][209]++;
    Validation.validateData(req, config.schema || null, (function (err) {
  _$jscoverage['server.js'][211]++;
  if (err) {
    _$jscoverage['server.js'][213]++;
    res.hapi.error = err;
  }
  _$jscoverage['server.js'][216]++;
  next();
}));
  }
  else {
    _$jscoverage['server.js'][221]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][222]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][228]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][229]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][235]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][236]++;
    next();
  }
}));
});
}), routeHandler: (function (config) {
  _$jscoverage['server.js'][247]++;
  return (function (req, res, next) {
  _$jscoverage['server.js'][249]++;
  if (! res.hapi.error) {
    _$jscoverage['server.js'][253]++;
    req.hapi.url = req.url;
    _$jscoverage['server.js'][254]++;
    req.hapi.query = req.query;
    _$jscoverage['server.js'][255]++;
    req.hapi.params = req.params;
    _$jscoverage['server.js'][256]++;
    req.hapi.server = server;
    _$jscoverage['server.js'][258]++;
    var request = (config.mode === "raw"? req: req.hapi);
    _$jscoverage['server.js'][260]++;
    config.handler(request, (function (result, options) {
  _$jscoverage['server.js'][262]++;
  res.hapi[result instanceof Error? "error": "result"] = result;
  _$jscoverage['server.js'][263]++;
  res.hapi.options = options || {};
  _$jscoverage['server.js'][264]++;
  next();
}));
  }
  else {
    _$jscoverage['server.js'][269]++;
    next();
  }
});
}), postRoute: (function (req, res, next) {
  _$jscoverage['server.js'][279]++;
  server.setCorsHeaders(res);
  _$jscoverage['server.js'][280]++;
  res.setHeader("Cache-Control", "must-revalidate");
  _$jscoverage['server.js'][282]++;
  if (res.hapi.result) {
    _$jscoverage['server.js'][284]++;
    var rev = null;
    _$jscoverage['server.js'][285]++;
    if (req.method === "GET" && rev) {
      _$jscoverage['server.js'][287]++;
      res.setHeader("ETag", rev);
      _$jscoverage['server.js'][289]++;
      var condition = internals.parseCondition(req.headers["if-none-match"]);
      _$jscoverage['server.js'][291]++;
      if (condition[rev] || condition["*"]) {
        _$jscoverage['server.js'][294]++;
        internals.respond(res, 304);
      }
      else {
        _$jscoverage['server.js'][298]++;
        internals.respond(res, 200, res.hapi.result);
      }
    }
    else {
      _$jscoverage['server.js'][301]++;
      if (res.hapi.options.created) {
        _$jscoverage['server.js'][303]++;
        internals.respond(res, 201, res.hapi.result, {"Location": server.settings.uri + res.hapi.options.created});
      }
      else {
        _$jscoverage['server.js'][307]++;
        internals.respond(res, 200, res.hapi.result);
      }
    }
    _$jscoverage['server.js'][310]++;
    Log.info("Replied", req);
  }
  else {
    _$jscoverage['server.js'][312]++;
    if (req.hapi.error) {
      _$jscoverage['server.js'][314]++;
      if (req.hapi.error.type === "oauth") {
        _$jscoverage['server.js'][316]++;
        internals.respond(res, req.hapi.error.code, {error: req.hapi.error.error, error_description: req.hapi.error.text});
      }
      else {
        _$jscoverage['server.js'][320]++;
        internals.respond(res, req.hapi.error.code, {error: req.hapi.error.text, message: req.hapi.error.message, code: req.hapi.error.code});
      }
      _$jscoverage['server.js'][323]++;
      Log.err(res.hapi.error, req);
    }
    else {
      _$jscoverage['server.js'][327]++;
      internals.respond(res, 200);
      _$jscoverage['server.js'][328]++;
      Log.info("Replied", req);
    }
  }
  _$jscoverage['server.js'][331]++;
  next();
}), unhandledRoute: (function (next) {
  _$jscoverage['server.js'][339]++;
  this.req._startTime = new Date();
  _$jscoverage['server.js'][341]++;
  if (server.settings.ext.onUnknownRoute) {
    _$jscoverage['server.js'][345]++;
    server.settings.ext.onUnknownRoute(this.req, this.res);
    _$jscoverage['server.js'][346]++;
    next();
  }
  else {
    _$jscoverage['server.js'][350]++;
    Log.info("Received", this.req);
    _$jscoverage['server.js'][352]++;
    var error = Err.notFound("No such path or method");
    _$jscoverage['server.js'][353]++;
    internals.respond(this.res, error.code, {error: error.text, message: error.message, code: error.code});
    _$jscoverage['server.js'][355]++;
    Log.info(error, this.req);
    _$jscoverage['server.js'][356]++;
    next();
  }
}), setCorsHeaders: (function (res) {
  _$jscoverage['server.js'][365]++;
  res.setHeader("Access-Control-Allow-Origin", "*");
  _$jscoverage['server.js'][366]++;
  res.setHeader("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS");
  _$jscoverage['server.js'][367]++;
  res.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type, If-None-Match");
  _$jscoverage['server.js'][368]++;
  res.setHeader("Access-Control-Max-Age", server.settings.cors.maxAge);
}), public: {start: (function () {
  _$jscoverage['server.js'][380]++;
  server.listener.listen(server.settings.port, server.settings.host);
  _$jscoverage['server.js'][381]++;
  Log.info(Process.settings.name + " Server instance started at " + server.settings.uri);
}), stop: (function () {
  _$jscoverage['server.js'][389]++;
  server.listener.close();
  _$jscoverage['server.js'][390]++;
  Log.info(Process.settings.name + " Server instance stopped at " + server.settings.uri);
}), addRoute: (function (config) {
  _$jscoverage['server.js'][400]++;
  if (config.authentication !== "none" && server.settings.authentication === null) {
    _$jscoverage['server.js'][403]++;
    Log.err("Route requires authentication but none configured");
    _$jscoverage['server.js'][404]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][407]++;
  if (! config.path) {
    _$jscoverage['server.js'][409]++;
    Log.err("Route missing path");
    _$jscoverage['server.js'][410]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][413]++;
  if (! config.handler) {
    _$jscoverage['server.js'][415]++;
    Log.err("Route missing handler");
    _$jscoverage['server.js'][416]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][421]++;
  var parameterNames = [];
  _$jscoverage['server.js'][422]++;
  if (/\*|\(|\)/.test(config.path) === false) {
    _$jscoverage['server.js'][424]++;
    var names = config.path.match(/:([^\/]+)/gi);
    _$jscoverage['server.js'][425]++;
    if (names) {
      _$jscoverage['server.js'][427]++;
      for (var i = 0, il = names.length; i < il; ++i) {
        _$jscoverage['server.js'][429]++;
        parameterNames.push(names[i].slice(1));
}
    }
  }
  _$jscoverage['server.js'][436]++;
  var wrapper = (function (func) {
  _$jscoverage['server.js'][438]++;
  return (function () {
  _$jscoverage['server.js'][442]++;
  if (arguments.length - 1 === parameterNames.length) {
    _$jscoverage['server.js'][444]++;
    this.req.params = {};
    _$jscoverage['server.js'][445]++;
    for (var i = 0, il = parameterNames.length; i < il; ++i) {
      _$jscoverage['server.js'][447]++;
      this.req.params[parameterNames[i]] = arguments[i];
}
  }
  _$jscoverage['server.js'][451]++;
  func(this.req, this.res, arguments[arguments.length - 1]);
});
});
  _$jscoverage['server.js'][457]++;
  server.router[config.method.toLowerCase()](config.path, {stream: true}, [wrapper(server.settings.ext.onPreRoute), wrapper(server.preRoute), wrapper(server.routeValidator(config)), wrapper(server.settings.ext.onPreHandler), wrapper(Validation.validateQuery), wrapper(server.routeHandler(config)), wrapper(server.settings.ext.onPostHandler), wrapper(server.postRoute), wrapper(server.settings.ext.onPostRoute)]);
}), addRoutes: (function (routes) {
  _$jscoverage['server.js'][472]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][474]++;
    server["public"].addRoute(routes[i]);
}
}), getListener: (function () {
  _$jscoverage['server.js'][483]++;
  return server.listener;
})}};
  _$jscoverage['server.js'][490]++;
  server.initialize();
  _$jscoverage['server.js'][494]++;
  return server["public"];
});
_$jscoverage['server.js'][500]++;
exports.instance = (function (name) {
  _$jscoverage['server.js'][502]++;
  if (name) {
    _$jscoverage['server.js'][504]++;
    name = name.toLowerCase();
    _$jscoverage['server.js'][506]++;
    var server = internals.servers[name];
    _$jscoverage['server.js'][507]++;
    if (server) {
      _$jscoverage['server.js'][509]++;
      return server;
    }
    else {
      _$jscoverage['server.js'][513]++;
      return null;
    }
  }
  else {
    _$jscoverage['server.js'][518]++;
    var names = Object.keys(internals.servers);
    _$jscoverage['server.js'][519]++;
    if (names.length === 1) {
      _$jscoverage['server.js'][521]++;
      return internals.servers[names[0]];
    }
    else {
      _$jscoverage['server.js'][523]++;
      if (names.length === 0) {
        _$jscoverage['server.js'][525]++;
        return null;
      }
      else {
        _$jscoverage['server.js'][529]++;
        Log.err("Cannot call Server.instance() without uri in a process with multiple server instances");
        _$jscoverage['server.js'][530]++;
        process.exit(1);
      }
    }
  }
});
_$jscoverage['server.js'][538]++;
exports.settings = (function (name) {
  _$jscoverage['server.js'][540]++;
  var server = exports.instance(name);
  _$jscoverage['server.js'][541]++;
  if (server) {
    _$jscoverage['server.js'][543]++;
    return server.settings;
  }
  else {
    _$jscoverage['server.js'][547]++;
    return null;
  }
});
_$jscoverage['server.js'][554]++;
exports.addRoutes = (function (arg0, arg1) {
  _$jscoverage['server.js'][558]++;
  var defaultInstances = (arguments.length === 2? (arguments[0] instanceof Array? arguments[0]: [arguments[0]]): null);
  _$jscoverage['server.js'][559]++;
  var routes = (arguments.length === 2? arguments[1]: arguments[0]);
  _$jscoverage['server.js'][563]++;
  routes = (routes instanceof Array? routes: [routes]);
  _$jscoverage['server.js'][564]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][566]++;
    var route = routes[i];
    _$jscoverage['server.js'][567]++;
    if (route.instance || defaultInstances) {
      _$jscoverage['server.js'][571]++;
      var instances = (route.instance? (route.instance instanceof Array? route.instance: [route.instance]): defaultInstances);
      _$jscoverage['server.js'][572]++;
      for (var r = 0, rl = instances.length; r < rl; ++r) {
        _$jscoverage['server.js'][574]++;
        var server = internals.servers[instances[r].toLowerCase()];
        _$jscoverage['server.js'][575]++;
        if (server) {
          _$jscoverage['server.js'][577]++;
          server["public"].addRoute(route);
        }
        else {
          _$jscoverage['server.js'][581]++;
          Log.err("Cannot find server instance: " + instances[r]);
          _$jscoverage['server.js'][582]++;
          process.exit(1);
        }
}
    }
    else {
      _$jscoverage['server.js'][590]++;
      for (var s in internals.servers) {
        _$jscoverage['server.js'][592]++;
        if (internals.servers.hasOwnProperty(s)) {
          _$jscoverage['server.js'][594]++;
          internals.servers[s]["public"].addRoute(route);
        }
}
    }
}
});
_$jscoverage['server.js'][604]++;
internals.authenticate = (function (req, res, routeConfig, server, callback) {
  _$jscoverage['server.js'][606]++;
  var scope = routeConfig.scope || null;
  _$jscoverage['server.js'][607]++;
  var minTos = routeConfig.tos || server.settings.tos.min;
  _$jscoverage['server.js'][608]++;
  var userMode = routeConfig.user || "required";
  _$jscoverage['server.js'][609]++;
  var isOptional = (routeConfig.authentication === "optional");
  _$jscoverage['server.js'][611]++;
  if (routeConfig.authentication === "none") {
    _$jscoverage['server.js'][613]++;
    callback(null);
    _$jscoverage['server.js'][614]++;
    return;
  }
  _$jscoverage['server.js'][617]++;
  var loadTokenFunc = (function (token, callback) {
  _$jscoverage['server.js'][619]++;
  Session.loadToken(server.settings.authentication.aes256Keys.oauthToken, token, callback);
});
  _$jscoverage['server.js'][622]++;
  MAC.authenticate(req, loadTokenFunc, {isHTTPS: server.settings.tls}, (function (isAuthenticated, session, err) {
  _$jscoverage['server.js'][624]++;
  if (isAuthenticated) {
    _$jscoverage['server.js'][626]++;
    if (session) {
      _$jscoverage['server.js'][628]++;
      req.hapi.session = session;
      _$jscoverage['server.js'][630]++;
      if (session.client) {
        _$jscoverage['server.js'][632]++;
        req.hapi.clientId = session.client;
        _$jscoverage['server.js'][636]++;
        if (scope === null || session.scope[scope]) {
          _$jscoverage['server.js'][639]++;
          req.hapi.scope = session.scope;
          _$jscoverage['server.js'][641]++;
          if (userMode === "any") {
            _$jscoverage['server.js'][645]++;
            callback(null);
          }
          else {
            _$jscoverage['server.js'][647]++;
            if (userMode === "required") {
              _$jscoverage['server.js'][651]++;
              if (session.user) {
                _$jscoverage['server.js'][655]++;
                if (minTos === "none" || (session.tos && session.tos >= minTos)) {
                  _$jscoverage['server.js'][658]++;
                  req.hapi.userId = session.user;
                  _$jscoverage['server.js'][659]++;
                  callback(null);
                }
                else {
                  _$jscoverage['server.js'][663]++;
                  callback(Err.forbidden("Insufficient TOS accepted"));
                }
              }
              else {
                _$jscoverage['server.js'][668]++;
                callback(Err.forbidden("Client token cannot be used on a user endpoint"));
              }
            }
            else {
              _$jscoverage['server.js'][671]++;
              if (userMode === "none") {
                _$jscoverage['server.js'][675]++;
                if (session.user) {
                  _$jscoverage['server.js'][677]++;
                  callback(Err.forbidden("User token cannot be used on a client endpoint"));
                }
                else {
                  _$jscoverage['server.js'][681]++;
                  callback(null);
                }
              }
              else {
                _$jscoverage['server.js'][686]++;
                callback(Err.internal("Unknown endpoint user mode"));
              }
            }
          }
        }
        else {
          _$jscoverage['server.js'][691]++;
          callback(Err.forbidden("Insufficient token scope ('" + scope + "' expected for client " + session.client + ")"));
        }
      }
      else {
        _$jscoverage['server.js'][696]++;
        callback(Err.internal("Missing client identifier in authenticated token"));
      }
    }
    else {
      _$jscoverage['server.js'][701]++;
      callback(Err.internal("Missing user object in authenticated token"));
    }
  }
  else {
    _$jscoverage['server.js'][708]++;
    if (isOptional && ! req.headers.authorization) {
      _$jscoverage['server.js'][711]++;
      callback(null);
    }
    else {
      _$jscoverage['server.js'][715]++;
      res.setHeader("WWW-Authenticate", MAC.getWWWAuthenticateHeader(err));
      _$jscoverage['server.js'][716]++;
      callback(Err.generic(401, "Invalid authentication", err));
    }
  }
}));
});
_$jscoverage['server.js'][725]++;
internals.processBody = (function (req, level, server, callback) {
  _$jscoverage['server.js'][730]++;
  level = level || (req.method === "POST" || req.method === "PUT"? "parse": "none");
  _$jscoverage['server.js'][732]++;
  if (level === "none") {
    _$jscoverage['server.js'][734]++;
    return callback(null);
  }
  _$jscoverage['server.js'][739]++;
  var contentType = req.headers["content-type"];
  _$jscoverage['server.js'][740]++;
  var mime = (contentType? contentType.split(";")[0]: "application/json");
  _$jscoverage['server.js'][741]++;
  var parserFunc = null;
  _$jscoverage['server.js'][743]++;
  if (mime === "application/json") {
    _$jscoverage['server.js'][745]++;
    parserFunc = JSON.parse;
  }
  else {
    _$jscoverage['server.js'][747]++;
    if (mime === "application/x-www-form-urlencoded") {
      _$jscoverage['server.js'][749]++;
      parserFunc = Querystring.parse;
    }
    else {
      _$jscoverage['server.js'][753]++;
      return callback(Err.badRequest("Unsupported content-type: " + mime));
    }
  }
  _$jscoverage['server.js'][758]++;
  var contentLength = req.headers["content-length"];
  _$jscoverage['server.js'][759]++;
  if (contentLength && parseInt(contentLength, 10) > server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][762]++;
    return callback(Err.badRequest("Payload content length greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
  _$jscoverage['server.js'][767]++;
  var payload = "";
  _$jscoverage['server.js'][768]++;
  var isBailed = false;
  _$jscoverage['server.js'][770]++;
  req.setEncoding("utf8");
  _$jscoverage['server.js'][771]++;
  req.addListener("data", (function (chunk) {
  _$jscoverage['server.js'][773]++;
  if (payload.length + chunk.length <= server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][775]++;
    payload += chunk;
  }
  else {
    _$jscoverage['server.js'][779]++;
    isBailed = true;
    _$jscoverage['server.js'][780]++;
    return callback(Err.badRequest("Payload size greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
}));
  _$jscoverage['server.js'][784]++;
  req.addListener("end", (function () {
  _$jscoverage['server.js'][786]++;
  if (isBailed) {
    _$jscoverage['server.js'][788]++;
    return;
  }
  _$jscoverage['server.js'][791]++;
  req.hapi.rawBody = payload;
  _$jscoverage['server.js'][793]++;
  if (level === "parse") {
    _$jscoverage['server.js'][795]++;
    if (payload) {
      _$jscoverage['server.js'][797]++;
      req.hapi.payload = {};
      _$jscoverage['server.js'][799]++;
      try {
        _$jscoverage['server.js'][801]++;
        req.hapi.payload = parserFunc(payload);
      }
      catch (err) {
        _$jscoverage['server.js'][805]++;
        return callback(Err.badRequest("Invalid JSON body"));
      }
      _$jscoverage['server.js'][808]++;
      callback(null);
    }
  }
}));
});
_$jscoverage['server.js'][817]++;
internals.parseCondition = (function (condition) {
  _$jscoverage['server.js'][819]++;
  if (condition) {
    _$jscoverage['server.js'][821]++;
    result = {};
    _$jscoverage['server.js'][823]++;
    var conditionRegex = (condition.indexOf("\"") !== -1? /(?:^|,)(?:\s*")([^"]+)(?:"\s*)/g: /(?:^|,)(?:\s*)([^\s]+)(?:\s*)/g);
    _$jscoverage['server.js'][824]++;
    condition.replace(conditionRegex, (function ($0) {
  _$jscoverage['server.js'][826]++;
  if ($0) {
    _$jscoverage['server.js'][828]++;
    result[$0] = true;
  }
}));
    _$jscoverage['server.js'][832]++;
    return result;
  }
  else {
    _$jscoverage['server.js'][836]++;
    return ({});
  }
});
_$jscoverage['server.js'][843]++;
internals.respond = (function (res, code, payload, headers) {
  _$jscoverage['server.js'][845]++;
  headers = headers || {};
  _$jscoverage['server.js'][846]++;
  var data = null;
  _$jscoverage['server.js'][848]++;
  if (payload) {
    _$jscoverage['server.js'][850]++;
    if (typeof payload === "object") {
      _$jscoverage['server.js'][854]++;
      headers["Content-Type"] = "application/json";
      _$jscoverage['server.js'][855]++;
      data = JSON.stringify(payload);
    }
    else {
      _$jscoverage['server.js'][861]++;
      headers["Content-Type"] = "text/plain";
      _$jscoverage['server.js'][862]++;
      data = payload;
    }
    _$jscoverage['server.js'][865]++;
    headers["Content-Length"] = Buffer.byteLength(data);
  }
  _$jscoverage['server.js'][868]++;
  res.writeHeader(code, headers);
  _$jscoverage['server.js'][869]++;
  res.end(data);
});
_$jscoverage['server.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Fs = require('fs');","var Http = require('http');","var Https = require('https');","var Url = require('url');","var Querystring = require('querystring');","var Director = require('director');","var MAC = require('mac');","var Utils = require('./utils');","var Err = require('./error');","var Log = require('./log');","var Process = require('./process');","var Validation = require('./validation');","var Defaults = require('./defaults');","var Session = require('./session');","","","// Declare internals","","var internals = {","","    // Servers instances by uri or name","","    servers: {}","};","","","// Create and configure server instance","","exports.create = function (host, port, options, routes) {","","    // Create server object","","    var server = {","","        // Private members","        // ----------------------------------------------------------------","","        settings: Utils.merge(Utils.clone(Defaults.server), options || {}),","        listener: null,","        router: null,","","        // Initialize server","        // ----------------------------------------------------------------","","        initialize: function () {","","            // Set basic configuration","","            server.settings.host = host.toLowerCase();","            server.settings.port = port;","            server.settings.name = (server.settings.name ? server.settings.name.toLowerCase() : (server.settings.host + ':' + server.settings.port));","            server.settings.uri = (server.settings.tls ? 'https://' : 'http://') + server.settings.host + ':' + server.settings.port + '/';","","            // Initialize authentication configuration and validate","","            if (server.settings.authentication) {","","                server.settings.authentication = Utils.merge(Utils.clone(Defaults.authentication), server.settings.authentication);","","                if (server.settings.authentication.tokenEndpoint === null ||","                    server.settings.authentication.loadClientFunc === null ||","                    server.settings.authentication.loadUserFunc === null ||","                    server.settings.authentication.checkAuthorizationFunc === null ||","                    server.settings.authentication.aes256Keys.oauthRefresh === null ||","                    server.settings.authentication.aes256Keys.oauthToken === null) {","","                    Log.err('Invalid authentication configuration');","                    process.exit(1);","                }","            }","","            // Verify no existing instances using the same uri or name","","            if (internals.servers[server.settings.name]) {","","                Log.err('Cannot configure multiple server instances using the same name or uri');","                process.exit(1);","            }","","            // Create router","","            server.router = new Director.http.Router();","            server.router.configure({","","                async: true,","                notfound: server.unhandledRoute","            });","","            var listernerEntryFunc = function (req, res) {","","                server.router.dispatch(req, res, function (err) {","","                    if (err) {","","                        // Should never get called since 'notfound' is set","","                        Log.err('Internal routing error');","                        res.writeHead(500);","                        res.end();","                    }","                });","            };","","            // Create server","","            if (server.settings.tls) {","","                var tls = {","","                    key: Fs.readFileSync(server.settings.tls.key),","                    cert: Fs.readFileSync(server.settings.tls.cert)","                };","","                server.listener = Https.createServer(tls, listernerEntryFunc);","            }","            else {","","                server.listener = Http.createServer(listernerEntryFunc);","            }","","            // Add to instance list","","            internals.servers[server.settings.name] = server;","","            // Setup OPTIONS handler","","            server.router.options(/.+/, function () {","","                server.setCorsHeaders(this.res);","                internals.respond(this.res, 200);","            });","","            // Setup OAuth token endpoint","","            if (server.settings.authentication) {","","                server.public.addRoute({","","                    method: 'POST',","                    path: server.settings.authentication.tokenEndpoint,","                    handler: Session.token,","                    schema: Session.type.endpoint,","                    mode: 'raw',","                    authentication: 'optional',","                    user: 'any',","                    tos: 'none'","                });","            }","","            // Add routes","","            if (routes) {","","                server.public.addRoutes(routes);","            }","        },","","        // Route preprocessor handler","        // ----------------------------------------------------------------","","        preRoute: function (req, res, next) {","","            req._startTime = new Date; // Used to determine request response time ","","            Log.info('Received', req);","","            req.hapi = {};","            res.hapi = {};","","            req.query = req.url.indexOf('?') &gt;= 0 ? Url.parse(req.url, true).query : {};","","            next();","        },","","        // Route validator","        // ----------------------------------------------------------------","","        routeValidator: function (config) {","","            return function (req, res, next) {","","                // Authentication","","                internals.authenticate(req, res, config, server, function (err) {","","                    if (err === null) {","","                        // Query parameters","","                        Validation.validateQuery(req, config.query ? Utils.map(config.query) : null, function (err) {","","                            if (err === null) {","","                                // Load payload","","                                internals.processBody(req, config.payload || (config.schema ? 'parse' : null), server, function (err) {","","                                    if (err === null) {","","                                        // Validate payload schema","","                                        Validation.validateData(req, config.schema || null, function (err) {","","                                            if (err) {","","                                                res.hapi.error = err;","                                            }","","                                            next();","                                        });","                                    }","                                    else {","","                                        res.hapi.error = err;","                                        next();","                                    }","                                });","                            }","                            else {","","                                res.hapi.error = err;","                                next();","                            }","                        });","                    }","                    else {","","                        res.hapi.error = err;","                        next();","                    }","                });","            };","        },","","        // Request handler wrapper","        // ----------------------------------------------------------------","","        routeHandler: function (config) {","","            return function (req, res, next) {","","                if (!res.hapi.error) {","","                    // Link req stuff into hapi object","","                    req.hapi.url = req.url;","                    req.hapi.query = req.query;","                    req.hapi.params = req.params;","                    req.hapi.server = server;","","                    var request = (config.mode === 'raw' ? req : req.hapi);","","                    config.handler(request, function (result, options) {","","                        res.hapi[result instanceof Error ? 'error' : 'result'] = result;","                        res.hapi.options = options || {};","                        next();","                    });","                }","                else {","","                    next();","                }","            };","        },","","        // Set default response headers and send response","        // ----------------------------------------------------------------","","        postRoute: function (req, res, next) {","","            server.setCorsHeaders(res);","            res.setHeader('Cache-Control', 'must-revalidate');","","            if (res.hapi.result) {","","                var rev = null;                         // Need to set to something useful","                if (req.method === 'GET' &amp;&amp; rev) {","","                    res.setHeader('ETag', rev);","","                    var condition = internals.parseCondition(req.headers['if-none-match']);","","                    if (condition[rev] ||","                        condition['*']) {","","                        internals.respond(res, 304);","                    }","                    else {","","                        internals.respond(res, 200, res.hapi.result);","                    }","                }","                else if (res.hapi.options.created) {","","                    internals.respond(res, 201, res.hapi.result, { 'Location': server.settings.uri + res.hapi.options.created });","                }","                else {","","                    internals.respond(res, 200, res.hapi.result);","                }","","                Log.info('Replied', req);","            }","            else if (req.hapi.error) {","","                if (req.hapi.error.type === 'oauth') {","","                    internals.respond(res, req.hapi.error.code, { error: req.hapi.error.error, error_description: req.hapi.error.text });","                }","                else {","","                    internals.respond(res, req.hapi.error.code, { error: req.hapi.error.text, message: req.hapi.error.message, code: req.hapi.error.code });","                }","","                Log.err(res.hapi.error, req);","            }","            else {","","                internals.respond(res, 200);","                Log.info('Replied', req);","            }","","            next();","        },","","        // 404 Route handler","        // ----------------------------------------------------------------","","        unhandledRoute: function (next) {","","            this.req._startTime = new Date;                             // Used to determine request response time ","","            if (server.settings.ext.onUnknownRoute) {","","                // Extension handler is called, but the router continues processing the request regardless","","                server.settings.ext.onUnknownRoute(this.req, this.res);","                next();","            }","            else {","","                Log.info('Received', this.req);","","                var error = Err.notFound('No such path or method');","                internals.respond(this.res, error.code, { error: error.text, message: error.message, code: error.code });","","                Log.info(error, this.req);","                next();","            }","        },","","        // Set CORS headers","        // ----------------------------------------------------------------","","        setCorsHeaders: function (res) {","","            res.setHeader('Access-Control-Allow-Origin', '*');","            res.setHeader('Access-Control-Allow-Methods', 'GET, HEAD, POST, PUT, DELETE, OPTIONS');","            res.setHeader('Access-Control-Allow-Headers', 'Authorization, Content-Type, If-None-Match');","            res.setHeader('Access-Control-Max-Age', server.settings.cors.maxAge);","        },","","        // Public members","","        public: {","","            // Start server listener","            // ----------------------------------------------------------------","","            start: function () {","","                server.listener.listen(server.settings.port, server.settings.host);","                Log.info(Process.settings.name + ' Server instance started at ' + server.settings.uri);","            },","","            // Stop server","            // ----------------------------------------------------------------","","            stop: function () {","","                server.listener.close();","                Log.info(Process.settings.name + ' Server instance stopped at ' + server.settings.uri);","            },","","            // Add server route","            // ----------------------------------------------------------------","","            addRoute: function (config) {","","                // Validate configuration","","                if (config.authentication !== 'none' &amp;&amp;","                    server.settings.authentication === null) {","","                    Log.err('Route requires authentication but none configured');","                    process.exit(1);","                }","","                if (!config.path) {","","                    Log.err('Route missing path');","                    process.exit(1);","                }","","                if (!config.handler) {","","                    Log.err('Route missing handler');","                    process.exit(1);","                }","","                // Parse path to identify :parameter names, only if no other regex or wildcards are included","","                var parameterNames = [];","                if (/\\*|\\(|\\)/.test(config.path) === false) {","","                    var names = config.path.match(/:([^\\/]+)/ig);","                    if (names) {","","                        for (var i = 0, il = names.length; i &lt; il; ++i) {","","                            parameterNames.push(names[i].slice(1));","                        }","                    }","                }","","                // Handler wrapper","","                var wrapper = function (func) {","","                    return function () {","","                        // Convert director arguements to parameters object","","                        if (arguments.length - 1 === parameterNames.length) {","","                            this.req.params = {};","                            for (var i = 0, il = parameterNames.length; i &lt; il; ++i) {","","                                this.req.params[parameterNames[i]] = arguments[i];","                            }","                        }","","                        func(this.req, this.res, arguments[arguments.length - 1]);","                    };","                };","","                // Add route to Director","","                server.router[config.method.toLowerCase()](config.path, { stream: true }, [","","                    wrapper(server.settings.ext.onPreRoute),","                    wrapper(server.preRoute),","                    wrapper(server.routeValidator(config)),","                    wrapper(server.settings.ext.onPreHandler),","                    wrapper(Validation.validateQuery), // Validation.validateQuery(req, config, function (err) {","                    wrapper(server.routeHandler(config)),","                    wrapper(server.settings.ext.onPostHandler),","                    wrapper(server.postRoute),","                    wrapper(server.settings.ext.onPostRoute)]);","            },","","            addRoutes: function (routes) {","","                for (var i = 0, il = routes.length; i &lt; il; ++i) {","","                    server.public.addRoute(routes[i]);","                }","            },","","            // Access internal server instance","            // ----------------------------------------------------------------","","            getListener: function () {","","                return server.listener;","            }","        }","    };","","    // Initialize","","    server.initialize();","","    // Return public interface","","    return server.public;","};","","","// Return server object","","exports.instance = function (name) {","","    if (name) {","","        name = name.toLowerCase();","","        var server = internals.servers[name];","        if (server) {","","            return server;","        }","        else {","","            return null;","        }","    }","    else {","","        var names = Object.keys(internals.servers);","        if (names.length === 1) {","","            return internals.servers[names[0]];","        }","        else if (names.length === 0) {","","            return null;","        }","        else {","","            Log.err('Cannot call Server.instance() without uri in a process with multiple server instances');","            process.exit(1);","        }","    }","};","","","// Return server object configuration","","exports.settings = function (name) {","","    var server = exports.instance(name);","    if (server) {","","        return server.settings;","    }","    else {","","        return null;","    }","};","","","// Add routes to multiple instances","","exports.addRoutes = function (arg0, arg1) { // [defaultInstances,] routes","","    // Handle optional arguments","","    var defaultInstances = (arguments.length === 2 ? (arguments[0] instanceof Array ? arguments[0] : [arguments[0]]) : null);","    var routes = (arguments.length === 2 ? arguments[1] : arguments[0]);","","    // Process each route","","    routes = (routes instanceof Array ? routes : [routes]);","    for (var i = 0, il = routes.length; i &lt; il; ++i) {","","        var route = routes[i];","        if (route.instance || defaultInstances) {","","            // Select instances","","            var instances = (route.instance ? (route.instance instanceof Array ? route.instance : [route.instance]) : defaultInstances);","            for (var r = 0, rl = instances.length; r &lt; rl; ++r) {","","                var server = internals.servers[instances[r].toLowerCase()];","                if (server) {","","                    server.public.addRoute(route);","                }","                else {","","                    Log.err('Cannot find server instance: ' + instances[r]);","                    process.exit(1);","                }","            }","        }","        else {","","            // All instances","","            for (var s in internals.servers) {","","                if (internals.servers.hasOwnProperty(s)) {","","                    internals.servers[s].public.addRoute(route);","                }","            }","        }","    }","};","","","// Token Authentication","","internals.authenticate = function (req, res, routeConfig, server, callback) {","","    var scope = routeConfig.scope || null;","    var minTos = routeConfig.tos || server.settings.tos.min;","    var userMode = routeConfig.user || 'required';","    var isOptional = (routeConfig.authentication === 'optional');","","    if (routeConfig.authentication === 'none') {","","        callback(null);","        return;","    }","","    var loadTokenFunc = function (token, callback) {","","        Session.loadToken(server.settings.authentication.aes256Keys.oauthToken, token, callback);","    };","","    MAC.authenticate(req, loadTokenFunc, { isHTTPS: server.settings.tls }, function (isAuthenticated, session, err) {","","        if (isAuthenticated) {","","            if (session) {","","                req.hapi.session = session;","","                if (session.client) {","","                    req.hapi.clientId = session.client;","","                    // Check scope","","                    if (scope === null ||","                        session.scope[scope]) {","","                        req.hapi.scope = session.scope;","","                        if (userMode === 'any') {","","                            // User Mode: any","","                            callback(null);","                        }","                        else if (userMode === 'required') {","","                            // User Mode: required","","                            if (session.user) {","","                                // Check TOS","","                                if (minTos === 'none' ||","                                    (session.tos &amp;&amp; session.tos &gt;= minTos)) {","","                                    req.hapi.userId = session.user;","                                    callback(null);","                                }","                                else {","","                                    callback(Err.forbidden('Insufficient TOS accepted'));","                                }","                            }","                            else {","","                                callback(Err.forbidden('Client token cannot be used on a user endpoint'));","                            }","                        }","                        else if (userMode === 'none') {","","                            // User Mode: none","","                            if (session.user) {","","                                callback(Err.forbidden('User token cannot be used on a client endpoint'));","                            }","                            else {","","                                callback(null);","                            }","                        }","                        else {","","                            callback(Err.internal('Unknown endpoint user mode'));","                        }","                    }","                    else {","","                        callback(Err.forbidden('Insufficient token scope (\\'' + scope + '\\' expected for client ' + session.client + ')'));","                    }","                }","                else {","","                    callback(Err.internal('Missing client identifier in authenticated token'));","                }","            }","            else {","","                callback(Err.internal('Missing user object in authenticated token'));","            }","        }","        else {","","            // Unauthenticated","","            if (isOptional &amp;&amp;","                !req.headers.authorization) {","","                callback(null);","            }","            else {","","                res.setHeader('WWW-Authenticate', MAC.getWWWAuthenticateHeader(err));","                callback(Err.generic(401, 'Invalid authentication', err));","            }","        }","    });","};","","","// Read and parse body","","internals.processBody = function (req, level, server, callback) {","","    // Levels are: 'none', 'raw', 'parse'","    // Default is 'parse' for POST and PUT otherwise 'none'","","    level = level || (req.method === 'POST' || req.method === 'PUT' ? 'parse' : 'none');","","    if (level === 'none') {","","        return callback(null);","    }","","    // Check content type (defaults to 'application/json')","","    var contentType = req.headers['content-type'];","    var mime = (contentType ? contentType.split(';')[0] : 'application/json');","    var parserFunc = null;","","    if (mime === 'application/json') {","","        parserFunc = JSON.parse;","    }","    else if (mime === 'application/x-www-form-urlencoded') {","","        parserFunc = Querystring.parse;","    }","    else {","","        return callback(Err.badRequest('Unsupported content-type: ' + mime));","    }","","    // Check content size","","    var contentLength = req.headers['content-length'];","    if (contentLength &amp;&amp;","        parseInt(contentLength, 10) &gt; server.settings.payload.maxBytes) {","","        return callback(Err.badRequest('Payload content length greater than maximum allowed: ' + server.settings.payload.maxBytes));","    }","","    // Read incoming payload","","    var payload = '';","    var isBailed = false;","","    req.setEncoding('utf8');","    req.addListener('data', function (chunk) {","","        if (payload.length + chunk.length &lt;= server.settings.payload.maxBytes) {","","            payload += chunk;","        }","        else {","","            isBailed = true;","            return callback(Err.badRequest('Payload size greater than maximum allowed: ' + server.settings.payload.maxBytes));","        }","    });","","    req.addListener('end', function () {","","        if (isBailed) {","","            return;","        }","","        req.hapi.rawBody = payload;","","        if (level === 'parse') {","","            if (payload) {","","                req.hapi.payload = {};","","                try {","","                    req.hapi.payload = parserFunc(payload);","                }","                catch (err) {","","                    return callback(Err.badRequest('Invalid JSON body'));","                }","","                callback(null);","            }","        }","    });","};","","","// Parse If-None-Match request header","","internals.parseCondition = function (condition) {","","    if (condition) {","","        result = {};","","        var conditionRegex = (condition.indexOf('\"') !== -1 ? /(?:^|,)(?:\\s*\")([^\"]+)(?:\"\\s*)/g : /(?:^|,)(?:\\s*)([^\\s]+)(?:\\s*)/g);","        condition.replace(conditionRegex, function ($0) {","","            if ($0) {","","                result[$0] = true;","            }","        });","","        return result;","    }","    else {","","        return {};","    }","};","","","// Format and send HTTP response","","internals.respond = function (res, code, payload, headers) {","","    headers = headers || {};","    var data = null;","","    if (payload) {","","        if (typeof payload === 'object') {","","            // Object","","            headers['Content-Type'] = 'application/json';","            data = JSON.stringify(payload);","        }","        else {","","            // String","","            headers['Content-Type'] = 'text/plain';","            data = payload;","        }","","        headers['Content-Length'] = Buffer.byteLength(data);","    }","","    res.writeHeader(code, headers);","    res.end(data);","};",""];
