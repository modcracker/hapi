/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utils/file.js']) {
  _$jscoverage['utils/file.js'] = [];
  _$jscoverage['utils/file.js'][4] = 0;
  _$jscoverage['utils/file.js'][5] = 0;
  _$jscoverage['utils/file.js'][6] = 0;
  _$jscoverage['utils/file.js'][7] = 0;
  _$jscoverage['utils/file.js'][8] = 0;
  _$jscoverage['utils/file.js'][9] = 0;
  _$jscoverage['utils/file.js'][21] = 0;
  _$jscoverage['utils/file.js'][22] = 0;
  _$jscoverage['utils/file.js'][23] = 0;
  _$jscoverage['utils/file.js'][24] = 0;
  _$jscoverage['utils/file.js'][26] = 0;
  _$jscoverage['utils/file.js'][27] = 0;
  _$jscoverage['utils/file.js'][28] = 0;
  _$jscoverage['utils/file.js'][29] = 0;
  _$jscoverage['utils/file.js'][31] = 0;
  _$jscoverage['utils/file.js'][35] = 0;
  _$jscoverage['utils/file.js'][41] = 0;
  _$jscoverage['utils/file.js'][43] = 0;
  _$jscoverage['utils/file.js'][44] = 0;
  _$jscoverage['utils/file.js'][46] = 0;
  _$jscoverage['utils/file.js'][47] = 0;
  _$jscoverage['utils/file.js'][49] = 0;
  _$jscoverage['utils/file.js'][52] = 0;
  _$jscoverage['utils/file.js'][53] = 0;
  _$jscoverage['utils/file.js'][54] = 0;
  _$jscoverage['utils/file.js'][57] = 0;
  _$jscoverage['utils/file.js'][58] = 0;
  _$jscoverage['utils/file.js'][62] = 0;
  _$jscoverage['utils/file.js'][63] = 0;
  _$jscoverage['utils/file.js'][66] = 0;
  _$jscoverage['utils/file.js'][67] = 0;
  _$jscoverage['utils/file.js'][68] = 0;
  _$jscoverage['utils/file.js'][71] = 0;
  _$jscoverage['utils/file.js'][73] = 0;
  _$jscoverage['utils/file.js'][77] = 0;
  _$jscoverage['utils/file.js'][83] = 0;
  _$jscoverage['utils/file.js'][84] = 0;
  _$jscoverage['utils/file.js'][90] = 0;
  _$jscoverage['utils/file.js'][91] = 0;
  _$jscoverage['utils/file.js'][92] = 0;
  _$jscoverage['utils/file.js'][94] = 0;
}
_$jscoverage['utils/file.js'][4]++;
var async = require("async");
_$jscoverage['utils/file.js'][5]++;
var fs = require("fs");
_$jscoverage['utils/file.js'][6]++;
var Utils = require("../utils");
_$jscoverage['utils/file.js'][7]++;
var path = require("path");
_$jscoverage['utils/file.js'][8]++;
var recursiveWalkSync, walkIterator;
_$jscoverage['utils/file.js'][9]++;
var walkSettings = {includeOnly: [], excludeOnly: [], recursive: true, ignoreDotFiles: true};
_$jscoverage['utils/file.js'][21]++;
exports.include = (function (fullPath, filename, list) {
  _$jscoverage['utils/file.js'][22]++;
  var matchFound = false;
  _$jscoverage['utils/file.js'][23]++;
  for (var p in list) {
    _$jscoverage['utils/file.js'][24]++;
    var pattern = list[p];
    _$jscoverage['utils/file.js'][26]++;
    if (pattern instanceof RegExp) {
      _$jscoverage['utils/file.js'][27]++;
      matchFound += path.join(fullPath, filename).match(pattern)? 1: 0;
    }
    else {
      _$jscoverage['utils/file.js'][28]++;
      if (typeof pattern === "string") {
        _$jscoverage['utils/file.js'][29]++;
        matchFound += pattern === path.basename(filename)? 1: 0;
      }
      else {
        _$jscoverage['utils/file.js'][31]++;
        throw "Unexpected type given to include()";
      }
    }
}
  _$jscoverage['utils/file.js'][35]++;
  return (matchFound > 0);
});
_$jscoverage['utils/file.js'][41]++;
exports.recursiveWalkSync = recursiveWalkSync = (function (pwd, options, selected_files) {
  _$jscoverage['utils/file.js'][43]++;
  options = Utils.merge(walkSettings, options);
  _$jscoverage['utils/file.js'][44]++;
  selected_files = selected_files || [];
  _$jscoverage['utils/file.js'][46]++;
  try {
    _$jscoverage['utils/file.js'][47]++;
    var files = fs.readdirSync(pwd);
  }
  catch (err) {
    _$jscoverage['utils/file.js'][49]++;
    throw err;
  }
  _$jscoverage['utils/file.js'][52]++;
  for (var i in files) {
    _$jscoverage['utils/file.js'][53]++;
    var filename = files[i];
    _$jscoverage['utils/file.js'][54]++;
    var currentFile = path.join(pwd, filename);
    _$jscoverage['utils/file.js'][57]++;
    if (options.excludeOnly.length > 0 && exports.include(pwd, currentFile, options.excludeOnly)) {
      _$jscoverage['utils/file.js'][58]++;
      continue;
    }
    _$jscoverage['utils/file.js'][62]++;
    if (options.includeOnly.length > 0 && ! exports.include(pwd, currentFile, options.includeOnly)) {
      _$jscoverage['utils/file.js'][63]++;
      continue;
    }
    _$jscoverage['utils/file.js'][66]++;
    if (! fs.statSync(currentFile).isFile()) {
      _$jscoverage['utils/file.js'][67]++;
      if (options.recursive === true) {
        _$jscoverage['utils/file.js'][68]++;
        selected_files.push.apply(selected_files, recursiveWalkSync(currentFile, options, selected_files));
      }
    }
    else {
      _$jscoverage['utils/file.js'][71]++;
      if (options.ignoreDotFiles === true && filename[0] === ".") {
        _$jscoverage['utils/file.js'][71]++;
        continue;
      }
      _$jscoverage['utils/file.js'][73]++;
      selected_files.push(currentFile);
    }
}
  _$jscoverage['utils/file.js'][77]++;
  return selected_files;
});
_$jscoverage['utils/file.js'][83]++;
exports.walkIterator = walkIterator = (function (filename, callback) {
  _$jscoverage['utils/file.js'][84]++;
  callback(null, filename);
});
_$jscoverage['utils/file.js'][90]++;
exports.walk = (function (root, options, callback) {
  _$jscoverage['utils/file.js'][91]++;
  if (typeof callback === "undefined" || callback === null || typeof callback !== "function") {
    _$jscoverage['utils/file.js'][92]++;
    callback = (function () {
});
  }
  _$jscoverage['utils/file.js'][94]++;
  async.map(recursiveWalkSync(root, options), walkIterator, callback);
});
_$jscoverage['utils/file.js'].source = ["/*"," * Module dependencies"," */","var async = require(\"async\");","var fs = require(\"fs\");","var Utils = require(\"../utils\");","var path = require(\"path\");","var recursiveWalkSync, walkIterator;","var walkSettings = {","  includeOnly: [], ","  excludeOnly: [],","  recursive: true,","  ignoreDotFiles: true","};","","/*"," * Tests a string vs an array of strings or RegExps"," *"," * TODO: move out of file.js"," */","exports.include = function(fullPath, filename, list){","  var matchFound = false;","  for (var p in list){","    var pattern = list[p];","    ","    if (pattern instanceof RegExp){","      matchFound += path.join(fullPath, filename).match(pattern) ? 1 : 0;","    } else if (typeof pattern === \"string\"){","      matchFound += pattern === path.basename(filename) ? 1 : 0;","    } else {","      throw \"Unexpected type given to include()\";","    }","  }","  ","  return (matchFound &gt; 0);","}","","/*"," * Recursively generates list of files TODO: document"," */","exports.recursiveWalkSync =","recursiveWalkSync =  function(pwd, options, selected_files){","  options = Utils.merge(walkSettings, options);","  selected_files = selected_files || [];","  ","  try {","    var files = fs.readdirSync(pwd);","  } catch (err) {","    throw err;","  }","  ","  for(var i in files){","    var filename = files[i];","    var currentFile = path.join(pwd, filename);","    ","    // Skip ExcludeOnly","    if (options.excludeOnly.length &gt; 0 &amp;&amp; exports.include(pwd, currentFile, options.excludeOnly)){","      continue;","    }","    ","    // If includeOnly set:  Skip if not in IncludeOnly","    if (options.includeOnly.length &gt; 0 &amp;&amp; !exports.include(pwd, currentFile, options.includeOnly)){","      continue;","    }","    ","    if (!fs.statSync(currentFile).isFile()){","      if (options.recursive === true){","        selected_files.push.apply(selected_files, recursiveWalkSync(currentFile, options, selected_files));","      }","    } else {","      if (options.ignoreDotFiles === true &amp;&amp; filename[0] === \".\"){ continue; }","      ","      selected_files.push(currentFile)","    }","  }","  ","  return selected_files;","}","","/*"," * Iterator for use in walk() function"," */ ","exports.walkIterator = walkIterator = function(filename, callback){","  callback(null, filename);","}","","/*"," * Asynchronous directory walk with include/exclude support"," */","exports.walk = function(root, options, callback){","  if (typeof callback === \"undefined\" || callback === null || typeof callback !== \"function\"){","    callback = function(){};","  }","  async.map(recursiveWalkSync(root, options), walkIterator, callback);","}"];
