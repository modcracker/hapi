/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['type/number.js']) {
  _$jscoverage['type/number.js'] = [];
  _$jscoverage['type/number.js'][1] = 0;
  _$jscoverage['type/number.js'][2] = 0;
  _$jscoverage['type/number.js'][3] = 0;
  _$jscoverage['type/number.js'][4] = 0;
  _$jscoverage['type/number.js'][5] = 0;
  _$jscoverage['type/number.js'][14] = 0;
  _$jscoverage['type/number.js'][15] = 0;
  _$jscoverage['type/number.js'][22] = 0;
  _$jscoverage['type/number.js'][23] = 0;
  _$jscoverage['type/number.js'][25] = 0;
  _$jscoverage['type/number.js'][26] = 0;
  _$jscoverage['type/number.js'][30] = 0;
  _$jscoverage['type/number.js'][31] = 0;
  _$jscoverage['type/number.js'][33] = 0;
  _$jscoverage['type/number.js'][34] = 0;
  _$jscoverage['type/number.js'][37] = 0;
  _$jscoverage['type/number.js'][38] = 0;
  _$jscoverage['type/number.js'][41] = 0;
  _$jscoverage['type/number.js'][42] = 0;
  _$jscoverage['type/number.js'][45] = 0;
  _$jscoverage['type/number.js'][46] = 0;
  _$jscoverage['type/number.js'][49] = 0;
  _$jscoverage['type/number.js'][52] = 0;
  _$jscoverage['type/number.js'][55] = 0;
  _$jscoverage['type/number.js'][57] = 0;
  _$jscoverage['type/number.js'][60] = 0;
}
_$jscoverage['type/number.js'][1]++;
var Utils = require("../utils");
_$jscoverage['type/number.js'][2]++;
var TypeFactory = require("./base").TypeFactory;
_$jscoverage['type/number.js'][3]++;
var CondenseError = require("./base").CondenseError;
_$jscoverage['type/number.js'][4]++;
var Validator = require("validator");
_$jscoverage['type/number.js'][5]++;
var NumberType;
_$jscoverage['type/number.js'][14]++;
NumberType = (function () {
  _$jscoverage['type/number.js'][15]++;
  var defaults = {min: null, max: null, allowFloat: true, allowNaN: false};
  _$jscoverage['type/number.js'][22]++;
  NumberType = (function (n) {
  _$jscoverage['type/number.js'][23]++;
  var o = new Number(n);
  _$jscoverage['type/number.js'][25]++;
  o.validate = (function (options) {
  _$jscoverage['type/number.js'][26]++;
  options = Utils.merge(Utils.clone(defaults), options);
  _$jscoverage['type/number.js'][30]++;
  var num = this.valueOf();
  _$jscoverage['type/number.js'][31]++;
  var check = Validator.check(num);
  _$jscoverage['type/number.js'][33]++;
  if (options.allowNaN === false && isNaN(num) === true) {
    _$jscoverage['type/number.js'][34]++;
    return "This Number cannot be NaN";
  }
  _$jscoverage['type/number.js'][37]++;
  if (options.allowFloat === false && (num % 1 !== 0)) {
    _$jscoverage['type/number.js'][38]++;
    return "This Number cannot be a float";
  }
  _$jscoverage['type/number.js'][41]++;
  if (options.min !== null && num < options.min) {
    _$jscoverage['type/number.js'][42]++;
    return "This Number cannot be less than " + options.min;
  }
  _$jscoverage['type/number.js'][45]++;
  if (options.max !== null && num > options.max) {
    _$jscoverage['type/number.js'][46]++;
    return "This Number cannot be greater than " + options.max;
  }
  _$jscoverage['type/number.js'][49]++;
  return null;
});
  _$jscoverage['type/number.js'][52]++;
  return o;
});
  _$jscoverage['type/number.js'][55]++;
  NumberType.__name = "Number";
  _$jscoverage['type/number.js'][57]++;
  return NumberType;
})();
_$jscoverage['type/number.js'][60]++;
module.exports = NumberType;
_$jscoverage['type/number.js'].source = ["var Utils = require(\"../utils\");","var TypeFactory = require(\"./base\").TypeFactory","var CondenseError = require(\"./base\").CondenseError","var Validator = require(\"validator\");","var NumberType;","","/*"," *"," * Usage:"," *   var NumberType = Types.get(\"Number\");"," *   var x = NumberType(100);"," *"," */","NumberType = (function(){","  var defaults = {","    min: null,","    max: null,","    allowFloat: true,","    allowNaN: false","  };","  ","  NumberType = function(n){","    var o = new Number(n);","    ","    o.validate = function(options){","      options = Utils.merge(Utils.clone(defaults), options);","      ","      // TODO: validate options obj","      ","      var num = this.valueOf();","      var check = Validator.check(num);","      ","      if (options.allowNaN === false &amp;&amp; isNaN(num) === true){","        return \"This Number cannot be NaN\";","      }","      ","      if (options.allowFloat === false &amp;&amp; (num % 1 !== 0)){","        return \"This Number cannot be a float\";","      }","      ","      if (options.min !== null &amp;&amp; num &lt; options.min){","        return \"This Number cannot be less than \" + options.min;","      }","      ","      if (options.max !== null &amp;&amp; num &gt; options.max){","        return \"This Number cannot be greater than \" + options.max;","      }","      ","      return null;","    }","    ","    return o;","  }","  ","  NumberType.__name = \"Number\";","  ","  return NumberType;","})();","","module.exports = NumberType;"];
