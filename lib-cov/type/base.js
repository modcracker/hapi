/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['type/base.js']) {
  _$jscoverage['type/base.js'] = [];
  _$jscoverage['type/base.js'][1] = 0;
  _$jscoverage['type/base.js'][4] = 0;
  _$jscoverage['type/base.js'][5] = 0;
  _$jscoverage['type/base.js'][6] = 0;
  _$jscoverage['type/base.js'][7] = 0;
  _$jscoverage['type/base.js'][15] = 0;
  _$jscoverage['type/base.js'][16] = 0;
  _$jscoverage['type/base.js'][17] = 0;
  _$jscoverage['type/base.js'][19] = 0;
  _$jscoverage['type/base.js'][21] = 0;
  _$jscoverage['type/base.js'][24] = 0;
  _$jscoverage['type/base.js'][25] = 0;
}
_$jscoverage['type/base.js'][1]++;
var Utils = require("../utils");
_$jscoverage['type/base.js'][4]++;
function TypeFactory(TypeFn) {
  _$jscoverage['type/base.js'][5]++;
  return (function () {
  _$jscoverage['type/base.js'][6]++;
  var val = TypeFn(arguments[0]);
  _$jscoverage['type/base.js'][7]++;
  return val;
});
}
_$jscoverage['type/base.js'][15]++;
function CondenseError(fn, self, args) {
  _$jscoverage['type/base.js'][16]++;
  try {
    _$jscoverage['type/base.js'][17]++;
    fn.apply(self, args || []);
  }
  catch (e) {
    _$jscoverage['type/base.js'][19]++;
    return e;
  }
  _$jscoverage['type/base.js'][21]++;
  return null;
}
_$jscoverage['type/base.js'][24]++;
exports.TypeFactory = TypeFactory;
_$jscoverage['type/base.js'][25]++;
exports.CondenseError = CondenseError;
_$jscoverage['type/base.js'].source = ["var Utils = require(\"../utils\");","","","function TypeFactory(TypeFn){ // TODO: Check if Deprecated","  return function(){","    var val = TypeFn(arguments[0]);","    return val;","  }","}","","","/*"," * TODO: fill out "," */","function CondenseError(fn, self, args){","  try {","    fn.apply(self, args || []);","  } catch (e){","    return e;","  }","  return null;","}","","exports.TypeFactory = TypeFactory","exports.CondenseError = CondenseError"];
