/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['type/string.js']) {
  _$jscoverage['type/string.js'] = [];
  _$jscoverage['type/string.js'][1] = 0;
  _$jscoverage['type/string.js'][2] = 0;
  _$jscoverage['type/string.js'][3] = 0;
  _$jscoverage['type/string.js'][4] = 0;
  _$jscoverage['type/string.js'][5] = 0;
  _$jscoverage['type/string.js'][15] = 0;
  _$jscoverage['type/string.js'][16] = 0;
  _$jscoverage['type/string.js'][23] = 0;
  _$jscoverage['type/string.js'][24] = 0;
  _$jscoverage['type/string.js'][28] = 0;
  _$jscoverage['type/string.js'][29] = 0;
  _$jscoverage['type/string.js'][33] = 0;
  _$jscoverage['type/string.js'][34] = 0;
  _$jscoverage['type/string.js'][36] = 0;
  _$jscoverage['type/string.js'][37] = 0;
  _$jscoverage['type/string.js'][40] = 0;
  _$jscoverage['type/string.js'][41] = 0;
  _$jscoverage['type/string.js'][43] = 0;
  _$jscoverage['type/string.js'][44] = 0;
  _$jscoverage['type/string.js'][45] = 0;
  _$jscoverage['type/string.js'][51] = 0;
  _$jscoverage['type/string.js'][54] = 0;
  _$jscoverage['type/string.js'][57] = 0;
  _$jscoverage['type/string.js'][59] = 0;
  _$jscoverage['type/string.js'][62] = 0;
  _$jscoverage['type/string.js'][63] = 0;
}
_$jscoverage['type/string.js'][1]++;
var Utils = require("../utils");
_$jscoverage['type/string.js'][2]++;
var TypeFactory = require("./base").TypeFactory;
_$jscoverage['type/string.js'][3]++;
var CondenseError = require("./base").CondenseError;
_$jscoverage['type/string.js'][4]++;
var Validator = require("validator");
_$jscoverage['type/string.js'][5]++;
var StringTypeFactory, StringType;
_$jscoverage['type/string.js'][15]++;
StringTypeFactory = (function () {
  _$jscoverage['type/string.js'][16]++;
  var defaults = {allowEmpty: false, min: 0, max: null};
  _$jscoverage['type/string.js'][23]++;
  StringType = (function (n) {
  _$jscoverage['type/string.js'][24]++;
  var o = new String(n);
  _$jscoverage['type/string.js'][28]++;
  o.validate = (function (options) {
  _$jscoverage['type/string.js'][29]++;
  options = Utils.merge(Utils.clone(defaults), options);
  _$jscoverage['type/string.js'][33]++;
  var str = this.toString();
  _$jscoverage['type/string.js'][34]++;
  var check = Validator.check(str);
  _$jscoverage['type/string.js'][36]++;
  if (options.allowEmpty === false && this.toString() == "") {
    _$jscoverage['type/string.js'][37]++;
    return "This String cannot be blank.";
  }
  _$jscoverage['type/string.js'][40]++;
  if (options.max !== null) {
    _$jscoverage['type/string.js'][41]++;
    return CondenseError(check.len, check, [options.min, options.max]);
  }
  else {
    _$jscoverage['type/string.js'][43]++;
    var err = CondenseError(check.len, check, [options.min]);
    _$jscoverage['type/string.js'][44]++;
    if (err) {
      _$jscoverage['type/string.js'][45]++;
      return err;
    }
  }
  _$jscoverage['type/string.js'][51]++;
  return null;
});
  _$jscoverage['type/string.js'][54]++;
  return o;
});
  _$jscoverage['type/string.js'][57]++;
  StringType.__name = "String";
  _$jscoverage['type/string.js'][59]++;
  return StringType;
});
_$jscoverage['type/string.js'][62]++;
module.exports = new StringTypeFactory();
_$jscoverage['type/string.js'][63]++;
module.exports.StringType = StringTypeFactory;
_$jscoverage['type/string.js'].source = ["var Utils = require(\"../utils\");","var TypeFactory = require(\"./base\").TypeFactory","var CondenseError = require(\"./base\").CondenseError","var Validator = require(\"validator\");","var StringTypeFactory, StringType;","","/*"," *"," * Usage:"," *   var StringType = Types.get(\"string\");"," *   var x = StringType(\"walton\");"," *   x.validate(options) // returns null for valid; err string for invalid"," *"," */","StringTypeFactory = (function(){","  var defaults = {","    allowEmpty: false,","    // allowNumeric: false, // Deprecated","    min: 0,","    max: null","  }","  ","  StringType = function(n){","    var o = new String(n);","    ","    // s.__name = \"String\";","    ","    o.validate = function(options){","      options = Utils.merge(Utils.clone(defaults), options);","      ","      // TODO: validate options obj","      ","      var str = this.toString();","      var check = Validator.check(str);","      ","      if (options.allowEmpty === false &amp;&amp; this.toString() == \"\"){","        return \"This String cannot be blank.\";","      }","      ","      if (options.max !== null){","        return CondenseError(check.len, check, [options.min, options.max])","      } else {","        var err = CondenseError(check.len, check, [options.min]);","        if (err) {","          return err;","        }","      }","      ","      // TODO: add more checks?","      ","      return null; // No errors; valid.","    }","    ","    return o;","  }","  ","  StringType.__name = \"String\";","  ","  return StringType;","});","","module.exports = new StringTypeFactory();","module.exports.StringType = StringTypeFactory;"];
