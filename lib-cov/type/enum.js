/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['type/enum.js']) {
  _$jscoverage['type/enum.js'] = [];
  _$jscoverage['type/enum.js'][1] = 0;
  _$jscoverage['type/enum.js'][2] = 0;
  _$jscoverage['type/enum.js'][3] = 0;
  _$jscoverage['type/enum.js'][4] = 0;
  _$jscoverage['type/enum.js'][5] = 0;
  _$jscoverage['type/enum.js'][14] = 0;
  _$jscoverage['type/enum.js'][15] = 0;
  _$jscoverage['type/enum.js'][21] = 0;
  _$jscoverage['type/enum.js'][22] = 0;
  _$jscoverage['type/enum.js'][24] = 0;
  _$jscoverage['type/enum.js'][25] = 0;
  _$jscoverage['type/enum.js'][26] = 0;
  _$jscoverage['type/enum.js'][27] = 0;
  _$jscoverage['type/enum.js'][30] = 0;
  _$jscoverage['type/enum.js'][31] = 0;
  _$jscoverage['type/enum.js'][35] = 0;
  _$jscoverage['type/enum.js'][37] = 0;
  _$jscoverage['type/enum.js'][38] = 0;
  _$jscoverage['type/enum.js'][43] = 0;
  _$jscoverage['type/enum.js'][46] = 0;
  _$jscoverage['type/enum.js'][49] = 0;
  _$jscoverage['type/enum.js'][51] = 0;
  _$jscoverage['type/enum.js'][54] = 0;
}
_$jscoverage['type/enum.js'][1]++;
var Utils = require("../utils");
_$jscoverage['type/enum.js'][2]++;
var TypeFactory = require("./base").TypeFactory;
_$jscoverage['type/enum.js'][3]++;
var CondenseError = require("./base").CondenseError;
_$jscoverage['type/enum.js'][4]++;
var Validator = require("validator");
_$jscoverage['type/enum.js'][5]++;
var EnumType;
_$jscoverage['type/enum.js'][14]++;
EnumType = (function () {
  _$jscoverage['type/enum.js'][15]++;
  var defaults = {offset: 0, choices: []};
  _$jscoverage['type/enum.js'][21]++;
  EnumType = (function (n) {
  _$jscoverage['type/enum.js'][22]++;
  var o = new String(n);
  _$jscoverage['type/enum.js'][24]++;
  o.valueOf = (function (options) {
  _$jscoverage['type/enum.js'][25]++;
  var key = this.toString();
  _$jscoverage['type/enum.js'][26]++;
  var index = options.choices.indexOf(key);
  _$jscoverage['type/enum.js'][27]++;
  return index + options.offset;
});
  _$jscoverage['type/enum.js'][30]++;
  o.validate = (function (options) {
  _$jscoverage['type/enum.js'][31]++;
  options = Utils.merge(Utils.clone(defaults), options);
  _$jscoverage['type/enum.js'][35]++;
  var enumValue = this.valueOf(options);
  _$jscoverage['type/enum.js'][37]++;
  if (enumValue <= 0) {
    _$jscoverage['type/enum.js'][38]++;
    return "This Enum has no such key";
  }
  _$jscoverage['type/enum.js'][43]++;
  return null;
});
  _$jscoverage['type/enum.js'][46]++;
  return o;
});
  _$jscoverage['type/enum.js'][49]++;
  EnumType.__name = "Enum";
  _$jscoverage['type/enum.js'][51]++;
  return EnumType;
})();
_$jscoverage['type/enum.js'][54]++;
module.exports = EnumType;
_$jscoverage['type/enum.js'].source = ["var Utils = require(\"../utils\");","var TypeFactory = require(\"./base\").TypeFactory;","var CondenseError = require(\"./base\").CondenseError;","var Validator = require('validator');","var EnumType;","","/*"," *"," * Usage:"," *   var EnumType = Types.get(\"Enum\");"," *   var x = EnumType(100);"," *"," */","EnumType = (function(){","  var defaults = {","    // required: true,","    offset: 0,","    choices: [],","  }","  ","  EnumType = function(n){","    var o = new String(n);","    ","    o.valueOf = function(options){","      var key = this.toString();","      var index = options.choices.indexOf(key);","      return index + options.offset;","    }","    ","    o.validate = function(options){","      options = Utils.merge(Utils.clone(defaults), options);","      ","      // TODO: validate options obj","      ","      var enumValue = this.valueOf(options);","      ","      if (enumValue &lt;= 0){","        return \"This Enum has no such key\";","      }","      ","      // TODO: any other checks?","      ","      return null;","    }","    ","    return o;","  }","  ","  EnumType.__name = \"Enum\";","  ","  return EnumType;","})();","","module.exports = EnumType;"];
